lower_critical_value <- qpois(alpha / 2, n * lambda)
upper_critical_value <- qpois(1 - alpha / 2, n * lambda)
in_critical_region <- (test_statistic < lower_critical_value) |
(test_statistic > upper_critical_value)
if (in_critical_region) {
count_in_critical_region <- count_in_critical_region + 1
}}
proportion_in_critical_region <- count_in_critical_region / n_simulations
proportion_in_critical_region
set.seed(231020)
n_simulations <- 10000
count_in_critical_region <- 0
for (i in 1:n_simulations) {
simulated_data <- rpois(n, lambda)
test_statistic <- sum(simulated_data)
if (test_statistic < lower_critical_value) | (test_statistic > upper_critical_value) {
set.seed(231020)
n_simulations <- 10000
count_in_critical_region <- 0
for (i in 1:n_simulations) {
simulated_data <- rpois(n, lambda)
test_statistic <- sum(simulated_data)
if (test_statistic < lower_critical_value | (test_statistic > upper_critical_value) {
set.seed(231020)
n_simulations <- 10000
count_in_critical_region <- 0
for (i in 1:n_simulations) {
simulated_data <- rpois(n, lambda)
test_statistic <- sum(simulated_data)
if (test_statistic < lower_critical_value | test_statistic > upper_critical_value) {
count_in_critical_region <- count_in_critical_region + 1
}}
proportion_in_critical_region <- count_in_critical_region / n_simulations
proportion_in_critical_region
set.seed(231021)
n_simulations <- 10000
count_in_critical_region <- 0
for (i in 1:n_simulations) {
simulated_data <- rpois(n, lambda)
test_statistic <- sum(simulated_data)
if (test_statistic < lower_critical_value | test_statistic > upper_critical_value) {
count_in_critical_region <- count_in_critical_region + 1
}}
proportion_in_critical_region <- count_in_critical_region / n_simulations
proportion_in_critical_region
set.seed(231021)
n_simulations <- 10000
count_in_critical_region <- 0
for (i in 1:n_simulations) {
simulated_data <- rpois(n, lambda)
test_statistic <- sum(simulated_data)
if (test_statistic <= lower_critical_value | test_statistic >= upper_critical_value) {
count_in_critical_region <- count_in_critical_region + 1
}}
proportion_in_critical_region <- count_in_critical_region / n_simulations
proportion_in_critical_region
set.seed(231021)
n_simulations <- 10000
count_in_critical_region <- 0
for (i in 1:n_simulations) {
simulated_data <- rpois(n, 2)
test_statistic <- sum(simulated_data)
if (test_statistic <= lower_critical_value | test_statistic >= upper_critical_value) {
count_in_critical_region <- count_in_critical_region + 1
}}
proportion_in_critical_region <- count_in_critical_region / n_simulations
proportion_in_critical_region
#| warning: false
# Install all the required packages and load the libraries needed in the following analysis
library(GEOquery)
install.packages("GEOquery")
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
BiocManager::install("DESeq2")
BiocManager::install("GOstats")
BiocManager::install("GO.db")
BiocManager::install("Category")
BiocManager::install("org.Hs.eg.db")
library(GEOquery)
#| warning: false
# Install all the required packages and load the libraries needed in the following analysis
library(GEOquery)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
#| warning: false
# Install all the required packages and load the libraries needed in the following analysis
library(GEOquery)
library(DESeq2)
library(cluster)
library(pheatmap)
install.packages(c("flexdashboard", "DT", "shiny"))
install.packages("rsconnect")
setwd("~/Desktop/JHU/Statistical Programming Paradigms and Workflows/Project4")
setwd("~/Desktop/JHU/Statistical Programming Paradigms and Workflows/Project4")
library(flexdashboard)
library(shiny)
library(tidyverse)
library(here)
if (!file.exists(here("data", "tuesdata_drugs.rda"))) {
tuesdata <- tidytuesdayR::tt_load("2023-05-16")
tornados <- tuesdata$tornados
# save the files to rda objects
save(tornados, file = here("data", "tuesdata_tornados.rda"))
}
if (!file.exists(here("data", "tuesdata_drugs.rda"))) {
tuesdata <- tidytuesdayR::tt_load("2023-05-16")
tornados <- tuesdata$tornados
# save the files to rda objects
save(tornados, file = here("data", "tuesdata_tornados.rda"))
}
load(here("data", "tuesdata_tornados.rda"))
View(tornados)
data <- tornados
data[, c("om","data","st","mag","inj","fat","loss","ns")]
show <- data[, c("om","data","st","mag","inj","fat","loss","ns")]
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")]
head(show,10)
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om)
head(show,10)
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om)
colnames(show) <- c('ID','Date','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected')
head(show,10)
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
colnames(c('ID','Date','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected')) %>%
datatable()
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
colnames(c('ID','Date','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected'))
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
setNames(c('ID','Date','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected'))
library(DT)
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
setNames(c('ID','Date','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected')) %>%
DT::datatable()
View(show)
show <- data[, c("om","date","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
setNames(c('ID','Date','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected'))
show <- data[, c("om","date","time","tz","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
setNames(c('ID','Date','Time','Time zone','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected'))
renderDataTable({
datatable(show)})
sliderInput("slider", "Year range", min = 1950, max = 2021, value = c(1950, 2021))
yearly_tornado <- data %>%
filter(yr >= input$slider[1] & yr <= input$slider[2]) %>%
group_by(yr) %>%
count()
library(showtext)
font_add_google("Ubuntu")
font_labels <- "Ubuntu"
showtext_auto()
sliderInput("slider", "Year range", min = 1950, max = 2021, value = c(1950, 2021))
yearly_tornado <- data %>%
filter(yr >= input$slider[1] & yr <= input$slider[2]) %>%
group_by(yr) %>%
count()
library(usmap)
(1950+2021)/s
(1950+2021)/2
# Summarise number of tornadoes by state
tornadoes_1980 <- data %>%
filter(yr <= 1980) %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
View(tornadoes_1980)
3387/5
# Summarise average fatalities by type
yearly_tornado_loss <- data %>%
group_by(yr) %>%
summarise(n = sum(loss))
# Plot data
ggplot(yearly_tornado_loss, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado property loss through the Years",
x = "",
y = "Number of property loss") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
View(yearly_tornado_loss)
# Summarise average fatalities by type
yearly_tornado_fat <- data %>%
group_by(yr) %>%
summarise(n = sum(fat))
# Plot data
ggplot(yearly_tornado_fat, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado Fatalities through the Years",
x = "",
y = "Number of fatalities") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
View(yearly_tornado_fat)
?summarise()
# Summarise average fatalities by type
yearly_tornado_loss <- data %>%
group_by(yr) %>%
summarise(n = sum(loss,na.rm = TRUE))
# Summarise average fatalities by type
yearly_tornado_loss <- data %>%
group_by(yr) %>%
summarise(n = sum(loss,na.rm = TRUE))
# Plot data
ggplot(yearly_tornado_loss, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado property loss through the Years",
x = "",
y = "Number of property loss") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Chunk 1: global
library(flexdashboard)
library(shiny)
library(tidyverse)
library(here)
library(DT)
library(usmap)
library(showtext)
font_add_google("Ubuntu")
font_labels <- "Ubuntu"
showtext_auto()
if (!file.exists(here("data", "tuesdata_drugs.rda"))) {
tuesdata <- tidytuesdayR::tt_load("2023-05-16")
tornados <- tuesdata$tornados
# save the files to rda objects
save(tornados, file = here("data", "tuesdata_tornados.rda"))
}
load(here("data", "tuesdata_tornados.rda"))
data <- tornados
# Chunk 2
# Chunk 3
show <- data[, c("om","date","time","tz","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
setNames(c('ID','Date','Time','Time zone','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected'))
renderDataTable({
datatable(show)})
# Chunk 4
sliderInput("slider", "Year range", min = 1950, max = 2021, value = c(1950, 2021))
# Chunk 5
filtered_data <- reactive({
data %>%
filter(yr >= input$slider[1] & yr <= input$slider[2]) %>%
group_by(yr) %>%
count()
})
renderPlot({
ggplot(filtered_data(), aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado through the Years",
subtitle = "The number of tornadoes has risen over the past seventy years",
x = "",
y = "Number of tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 40, face = "bold"),
plot.subtitle = element_text(size = 24),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}, height = 600)
# Chunk 6
# Summarise average fatalities by type
yearly_tornado_inj <- data %>%
group_by(yr) %>%
summarise(n = sum(inj))
# Plot data
ggplot(yearly_tornado_inj, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado Injuries through the Years",
x = "",
y = "Number of injuries") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Chunk 7
# Summarise average fatalities by type
yearly_tornado_fat <- data %>%
group_by(yr) %>%
summarise(n = sum(fat))
# Plot data
ggplot(yearly_tornado_fat, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado Fatalities through the Years",
x = "",
y = "Number of fatalities") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Chunk 8
# Summarise average fatalities by type
yearly_tornado_loss <- data %>%
group_by(yr) %>%
summarise(n = sum(loss,na.rm = TRUE))
# Plot data
ggplot(yearly_tornado_loss, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado property loss through the Years",
x = "",
y = "Number of property loss") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Chunk 9
# Summarise number of tornadoes by state
tornadoes_1980 <- data %>%
filter(yr <= 1980) %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
# Add color levels to data for plot
tornadoes_1980 <- tornadoes_1980 %>%
mutate(color = case_when(value < 500 ~ "Less than 500",
value <= 1000 ~ "501 - 1,000",
value <= 2000 ~ "1,001 - 2,000",
value <= 4000 ~ "2,001 - 4,000",
value > 4000 ~ "More than 4,000",
TRUE ~ "No Tornadoes"))
# Arrange color levels
tornadoes_1980$color <- fct_relevel(tornadoes_1980$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
# Change column name to fit the usmap setting
names(tornadoes_1980)[1]<-"state"
# Plot data
plot_usmap(data = tornadoes_1980, values = "color", labels = FALSE) +
scale_fill_manual(values = c( "Less than 500" = "#ffdfa4",
"501 - 1,000" = "#FFC457",
"1,001 - 2,000"= "#E4683F",
"2,001 - 4,000"= "#C03434",
"More than 4,000" = "#98103E",
"No Tornadoes" = "grey70")) +
labs(title = "Number of Tornadoes by State",
subtitle = "Period 1950 - 1980 | Data: NOAA",
fill = "color",
x = "", y = "") +
theme(plot.title = element_text(margin = margin(b = 20, t=15),
family = font_labels, color = "#22222b",
face = "bold", size = 20, hjust = 0.5),
plot.subtitle = element_text(family = font_labels,
color = "#22222b", size = 10,
hjust = 0.5, vjust = 4),
legend.position = "bottom",
legend.title = element_blank(),
legend.text=element_text(family = font_labels, size = 8),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x=element_blank()) +
guides(fill = guide_legend(
label.position = "top", family = font_labels, color = "#808080", nrow = 1,
keywidth = 2, keyheight = 0.5))
# Chunk 10
# Summarise number of tornadoes by state
tornadoes_2021 <- data %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
# Add color levels to data for plot
tornadoes_2021 <- tornadoes_2021 %>%
mutate(color = case_when(value < 500 ~ "Less than 500",
value <= 1000 ~ "501 - 1,000",
value <= 2000 ~ "1,001 - 2,000",
value <= 4000 ~ "2,001 - 4,000",
value > 4000 ~ "More than 4,000",
TRUE ~ "No Tornadoes"))
# Arrange color levels
tornadoes_2021$color <- fct_relevel(tornadoes_2021$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
# Change column name to fit the usmap setting
names(tornadoes_2021)[1]<-"state"
# Plot data
plot_usmap(data = tornadoes_2021, values = "color", labels = FALSE) +
scale_fill_manual(values = c( "Less than 500" = "#ffdfa4",
"501 - 1,000" = "#FFC457",
"1,001 - 2,000"= "#E4683F",
"2,001 - 4,000"= "#C03434",
"More than 4,000" = "#98103E",
"No Tornadoes" = "grey70")) +
labs(title = "Number of Tornadoes by State",
subtitle = "Period 1950 - 2021 | Data: NOAA",
fill = "color",
x = "", y = "") +
theme(plot.title = element_text(margin = margin(b = 20, t=15),
family = font_labels, color = "#22222b",
face = "bold", size = 20, hjust = 0.5),
plot.subtitle = element_text(family = font_labels,
color = "#22222b", size = 10,
hjust = 0.5, vjust = 4),
legend.position = "bottom",
legend.title = element_blank(),
legend.text=element_text(family = font_labels, size = 8),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x=element_blank()) +
guides(fill = guide_legend(
label.position = "top", family = font_labels, color = "#808080", nrow = 1,
keywidth = 2, keyheight = 0.5))
# Chunk 11
textInput("state", h3("Two-letter postal abbreviation for the state"),
value = "Enter state...")
# Chunk 12
# Summarise number or tornadoes by month
filtered_state <- reactive({
data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
})
# Add months
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
# Order months
filtered_state$abv <- mymonths[ filtered_state$mo ]
# Summarise number or tornadoes by month
filtered_state <- data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
# Summarise number or tornadoes by month
filtered_state <- reactive({
data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
})
# Add months
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
# Order months
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
filtered_state <- reactive({
data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
})
renderPlot({
ggplot(filtered_state(), aes(abv, value)) +
geom_col(fill = "#98103E") +
labs(title = "Number of Tornadoes by Month",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "Month",
y = "Number of Tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}, height = 600)
