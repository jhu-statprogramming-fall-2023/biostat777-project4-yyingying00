filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
})
# Add months
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
# Order months
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
filtered_state <- reactive({
data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
})
renderPlot({
ggplot(filtered_state(), aes(abv, value)) +
geom_col(fill = "#98103E") +
labs(title = "Number of Tornadoes by Month",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "Month",
y = "Number of Tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}, height = 600)
library(flexdashboard)
library(shiny)
library(tidyverse)
library(here)
library(DT)
library(usmap)
library(showtext)
font_add_google("Ubuntu")
font_labels <- "Ubuntu"
showtext_auto()
if (!file.exists(here("data", "tuesdata_drugs.rda"))) {
tuesdata <- tidytuesdayR::tt_load("2023-05-16")
tornados <- tuesdata$tornados
# save the files to rda objects
save(tornados, file = here("data", "tuesdata_tornados.rda"))
}
load(here("data", "tuesdata_tornados.rda"))
data <- tornados
show <- data[, c("om","date","time","tz","st","mag","inj","fat","loss","ns")] %>%
arrange(om) %>%
head(100) %>%
setNames(c('ID','Date','Time','Time zone','State','Magnitude','Injuries','Death','Property loss',
'Number of state affected'))
renderDataTable({
datatable(show)})
sliderInput("slider", "Year range", min = 1950, max = 2021, value = c(1950, 2021))
filtered_data <- reactive({
data %>%
filter(yr >= input$slider[1] & yr <= input$slider[2]) %>%
group_by(yr) %>%
count()
})
renderPlot({
ggplot(filtered_data(), aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado through the Years",
subtitle = "The number of tornadoes has risen over the past seventy years",
x = "",
y = "Number of tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 40, face = "bold"),
plot.subtitle = element_text(size = 24),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}, height = 600)
# Summarise average fatalities by type
yearly_tornado_inj <- data %>%
group_by(yr) %>%
summarise(n = sum(inj))
# Plot data
ggplot(yearly_tornado_inj, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado Injuries through the Years",
x = "",
y = "Number of injuries") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Summarise average fatalities by type
yearly_tornado_fat <- data %>%
group_by(yr) %>%
summarise(n = sum(fat))
# Plot data
ggplot(yearly_tornado_fat, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado Fatalities through the Years",
x = "",
y = "Number of fatalities") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Summarise average fatalities by type
yearly_tornado_loss <- data %>%
group_by(yr) %>%
summarise(n = sum(loss,na.rm = TRUE))
# Plot data
ggplot(yearly_tornado_loss, aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado property loss through the Years",
x = "",
y = "Number of property loss") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
# Summarise number of tornadoes by state
tornadoes_1980 <- data %>%
filter(yr <= 1980) %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
# Add color levels to data for plot
tornadoes_1980 <- tornadoes_1980 %>%
mutate(color = case_when(value < 500 ~ "Less than 500",
value <= 1000 ~ "501 - 1,000",
value <= 2000 ~ "1,001 - 2,000",
value <= 4000 ~ "2,001 - 4,000",
value > 4000 ~ "More than 4,000",
TRUE ~ "No Tornadoes"))
# Arrange color levels
tornadoes_1980$color <- fct_relevel(tornadoes_1980$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
# Change column name to fit the usmap setting
names(tornadoes_1980)[1]<-"state"
# Plot data
plot_usmap(data = tornadoes_1980, values = "color", labels = FALSE) +
scale_fill_manual(values = c( "Less than 500" = "#ffdfa4",
"501 - 1,000" = "#FFC457",
"1,001 - 2,000"= "#E4683F",
"2,001 - 4,000"= "#C03434",
"More than 4,000" = "#98103E",
"No Tornadoes" = "grey70")) +
labs(title = "Number of Tornadoes by State",
subtitle = "Period 1950 - 1980 | Data: NOAA",
fill = "color",
x = "", y = "") +
theme(plot.title = element_text(margin = margin(b = 20, t=15),
family = font_labels, color = "#22222b",
face = "bold", size = 20, hjust = 0.5),
plot.subtitle = element_text(family = font_labels,
color = "#22222b", size = 10,
hjust = 0.5, vjust = 4),
legend.position = "bottom",
legend.title = element_blank(),
legend.text=element_text(family = font_labels, size = 8),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x=element_blank()) +
guides(fill = guide_legend(
label.position = "top", family = font_labels, color = "#808080", nrow = 1,
keywidth = 2, keyheight = 0.5))
# Summarise number of tornadoes by state
tornadoes_2021 <- data %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
# Add color levels to data for plot
tornadoes_2021 <- tornadoes_2021 %>%
mutate(color = case_when(value < 500 ~ "Less than 500",
value <= 1000 ~ "501 - 1,000",
value <= 2000 ~ "1,001 - 2,000",
value <= 4000 ~ "2,001 - 4,000",
value > 4000 ~ "More than 4,000",
TRUE ~ "No Tornadoes"))
# Arrange color levels
tornadoes_2021$color <- fct_relevel(tornadoes_2021$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
# Change column name to fit the usmap setting
names(tornadoes_2021)[1]<-"state"
# Plot data
plot_usmap(data = tornadoes_2021, values = "color", labels = FALSE) +
scale_fill_manual(values = c( "Less than 500" = "#ffdfa4",
"501 - 1,000" = "#FFC457",
"1,001 - 2,000"= "#E4683F",
"2,001 - 4,000"= "#C03434",
"More than 4,000" = "#98103E",
"No Tornadoes" = "grey70")) +
labs(title = "Number of Tornadoes by State",
subtitle = "Period 1950 - 2021 | Data: NOAA",
fill = "color",
x = "", y = "") +
theme(plot.title = element_text(margin = margin(b = 20, t=15),
family = font_labels, color = "#22222b",
face = "bold", size = 20, hjust = 0.5),
plot.subtitle = element_text(family = font_labels,
color = "#22222b", size = 10,
hjust = 0.5, vjust = 4),
legend.position = "bottom",
legend.title = element_blank(),
legend.text=element_text(family = font_labels, size = 8),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x=element_blank()) +
guides(fill = guide_legend(
label.position = "top", family = font_labels, color = "#808080", nrow = 1,
keywidth = 2, keyheight = 0.5))
textInput("state", "Two-letter postal abbreviation for the state", value = "TX")
filtered_state <- reactive({
data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
})
renderPlot({
ggplot(filtered_state(), aes(abv, value)) +
geom_col(fill = "#98103E") +
labs(title = "Number of Tornadoes by Month",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "Month",
y = "Number of Tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}, height = 600)
View(data)
unique(data$st)
filtered_state <- reactive({
browser()
data %>%
filter(st == input$state) %>%
group_by(mo) %>%
summarise(value = n())
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
})
renderPlot({
ggplot(filtered_state(), aes(abv, value)) +
geom_col(fill = "#98103E") +
labs(title = "Number of Tornadoes by Month",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "Month",
y = "Number of Tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
}, height = 600)
#filtered_state <- reactive({
filtered_state <-data %>%
filter(st = "TX" ) %>%
group_by(mo) %>%
summarise(value = n())
#filtered_state <- reactive({
filtered_state <-data %>%
filter(st == "TX" ) %>%
group_by(mo) %>%
summarise(value = n())
View(filtered_state)
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
filtered_state$abv <- mymonths[ filtered_state$mo ]
#renderPlot({
ggplot(filtered_state, aes(abv, value)) +
geom_col(fill = "#98103E") +
labs(title = "Number of Tornadoes by Month",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "Month",
y = "Number of Tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
#textInput("state", "Two-letter postal abbreviation for the state", value = "TX")
selectInput("state", "Two-letter postal abbreviation for the state",
choices = data$st, selected = "TX")
#textInput("state", "Two-letter postal abbreviation for the state", value = "TX")
selectInput("state", "Two-letter postal abbreviation for the state",
choices = unique(data$st), selected = "TX")
filtered_state <- reactive({
data %>%
filter(st == input$state ) %>%
group_by(mo) %>%
summarise(value = n())
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
filtered_state()$abv <- mymonths[ filtered_state()$mo ]
})
#renderPlot({
ggplot(filtered_state(), aes(abv, value)) +
geom_col(fill = "#98103E") +
labs(title = "Number of Tornadoes by Month",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "Month",
y = "Number of Tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
arrange(data, unique(data$st), desc)
sort(unique(data$stf))
sort(unique(data$st))
filtered_state <- data[data$st == "TX", ]
View(filtered_state)
filtered_state <- filtered_state %>%
group_by(mo) %>%
summarise(value = n())
View(filtered_state)
month <- data %>%
group_by(mo) %>%
summarise(value = n())
View(month)
# Summarise number of tornadoes by state
tornadoes_st <- data %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
# Print result
print(tornadoes_st)
tornadoes_st$color <- fct_relevel(tornadoes_st$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
renderPlot({
ggplot(filtered_data(), aes(yr, n)) +
geom_line(color = "#98103E") +
labs(title = "Tornado through the Years",
subtitle = "The number of tornadoes has risen over the past seventy years",
x = "",
y = "Number of tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 40, face = "bold"),
plot.subtitle = element_text(size = 24),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
})
# Summarise number of tornadoes by state
tornadoes_st <- data %>%
group_by(st) %>%
summarise(value = n()) %>%
arrange(desc(value))
# Print result
print(tornadoes_st)
yearly_tornado_top <- data %>%
group_by(yr, st) %>%
filter(st == "TX" | st == "KS" | st == "OK" | st == "FL") %>%
count()
# Plot data
ggplot(yearly_tornado_top, aes(yr, n)) +
geom_line(color = "#98103E") +
facet_wrap(~ st, nrow = 2) +
labs(title = "Tornado of top cities through the Years",
subtitle = "Pattern of the top 4 states are different",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "",
y = "Number of tornadoes") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
tornadoes_st$color <- fct_relevel(tornadoes_st$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
tornadoes_st <- tornadoes_st %>%
mutate(color = case_when(value < 500 ~ "Less than 500",
value <= 1000 ~ "501 - 1,000",
value <= 2000 ~ "1,001 - 2,000",
value <= 4000 ~ "2,001 - 4,000",
value > 4000 ~ "More than 4,000",
TRUE ~ "No Tornadoes"))
tornadoes_st$color <- fct_relevel(tornadoes_st$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
plot_usmap(data = tornadoes_st, values = "color", labels = FALSE) +
scale_fill_manual(values = c( "Less than 500" = "#ffdfa4",
"501 - 1,000" = "#FFC457",
"1,001 - 2,000"= "#E4683F",
"2,001 - 4,000"= "#C03434",
"More than 4,000" = "#98103E",
"No Tornadoes" = "grey70")) +
labs(title = "Number of Tornadoes by State",
subtitle = "Period 1950 - 2021 | Data: NOAA",
fill = "color",
x = "", y = "") +
theme(plot.title = element_text(margin = margin(b = 20, t=15),
family = font_labels, color = "#22222b",
face = "bold", size = 25, hjust = 0.5),
plot.subtitle = element_text(family = font_labels,
color = "#22222b", size = 15,
hjust = 0.5, vjust = 4),
legend.position = "bottom",
legend.title = element_blank(),
legend.text=element_text(family = font_labels, size = 8),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x=element_blank()) +
guides(fill = guide_legend(
label.position = "top", family = font_labels, color = "#808080", nrow = 1,
keywidth = 2, keyheight = 0.5))
View(tornadoes_st)
tornadoes_st <- tornadoes_st %>%
mutate(color = case_when(value < 500 ~ "Less than 500",
value <= 1000 ~ "501 - 1,000",
value <= 2000 ~ "1,001 - 2,000",
value <= 4000 ~ "2,001 - 4,000",
value > 4000 ~ "More than 4,000",
TRUE ~ "No Tornadoes"))
tornadoes_st$color <- fct_relevel(tornadoes_st$color, c("More than 4,000",
"2,001 - 4,000",
"1,001 - 2,000",
"501 - 1,000",
"Less than 500"))
names(tornadoes_st)[1]<-"state"
plot_usmap(data = tornadoes_st, values = "color", labels = FALSE) +
scale_fill_manual(values = c( "Less than 500" = "#ffdfa4",
"501 - 1,000" = "#FFC457",
"1,001 - 2,000"= "#E4683F",
"2,001 - 4,000"= "#C03434",
"More than 4,000" = "#98103E",
"No Tornadoes" = "grey70")) +
labs(title = "Number of Tornadoes by State",
subtitle = "Period 1950 - 2021 | Data: NOAA",
fill = "color",
x = "", y = "") +
theme(plot.title = element_text(margin = margin(b = 20, t=15),
family = font_labels, color = "#22222b",
face = "bold", size = 25, hjust = 0.5),
plot.subtitle = element_text(family = font_labels,
color = "#22222b", size = 15,
hjust = 0.5, vjust = 4),
legend.position = "bottom",
legend.title = element_blank(),
legend.text=element_text(family = font_labels, size = 8),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x=element_blank()) +
guides(fill = guide_legend(
label.position = "top", family = font_labels, color = "#808080", nrow = 1,
keywidth = 2, keyheight = 0.5))
level_fat <- data %>%
filter(!mag == -9)
# make EF scale as factors
level_fat$mag <- factor(level_fat$mag, c("0","1","2","3","4","5"))
# plot
ggplot(level_fat, aes(mag, fat)) +
geom_boxplot() +
labs(title = "Tornado Fatalities by EF Rating",
subtitle = "Higher the rating, higher the fatality and larger the variance",
caption = "Period 1950 - 2021 | Data: NOAA",
x = "EF Level", y = "Fatality") +
theme_minimal() +
theme(text = element_text(family = font_labels, color = 'black'),
plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 12),
panel.grid.major.x = element_blank())
